# Script de v√©rification et d'arr√™t complet pour le Bot Discord avec Ollama
# Ce script v√©rifie l'√©tat des services et les arr√™te proprement

Write-Host "üîç V√©rification et arr√™t des services Bot Discord + Ollama..." -ForegroundColor Yellow

# Fonction pour tuer un processus par nom
function Stop-ProcessByName {
    param([string]$ProcessName)
    
    $processes = Get-Process -Name $ProcessName -ErrorAction SilentlyContinue
    if ($processes) {
        Write-Host "‚ö†Ô∏è Arr√™t des processus $ProcessName..." -ForegroundColor Yellow
        foreach ($process in $processes) {
            try {
                $process.Kill()
                Write-Host "‚úÖ Processus $ProcessName (PID: $($process.Id)) arr√™t√©" -ForegroundColor Green
            } catch {
                Write-Host "‚ùå Impossible d'arr√™ter le processus $ProcessName (PID: $($process.Id))" -ForegroundColor Red
            }
        }
        Start-Sleep -Seconds 2
    } else {
        Write-Host "‚úÖ Aucun processus $ProcessName en cours" -ForegroundColor Green
    }
}

# Fonction pour v√©rifier si un port est utilis√©
function Test-Port {
    param([int]$Port)
    
    try {
        $connection = Test-NetConnection -ComputerName "localhost" -Port $Port -WarningAction SilentlyContinue -ErrorAction SilentlyContinue
        return $connection.TcpTestSucceeded
    } catch {
        return $false
    }
}

Write-Host "`nüìã √âtat actuel des services:" -ForegroundColor Cyan

# 1. V√©rifier les processus Node.js (Bot Discord)
Write-Host "`nü§ñ V√©rification du Bot Discord (Node.js):" -ForegroundColor Blue
$nodeProcesses = Get-Process -Name "node" -ErrorAction SilentlyContinue
if ($nodeProcesses) {
    Write-Host "‚ö†Ô∏è Processus Node.js d√©tect√©s:" -ForegroundColor Yellow
    foreach ($proc in $nodeProcesses) {
        $commandLine = (Get-WmiObject Win32_Process -Filter "ProcessId = $($proc.Id)").CommandLine
        Write-Host "  - PID: $($proc.Id) | Commande: $commandLine" -ForegroundColor White
    }
} else {
    Write-Host "‚úÖ Aucun processus Node.js en cours" -ForegroundColor Green
}

# 2. V√©rifier Ollama
Write-Host "`nü¶ô V√©rification d'Ollama:" -ForegroundColor Blue
$ollamaProcesses = Get-Process -Name "ollama" -ErrorAction SilentlyContinue
if ($ollamaProcesses) {
    Write-Host "‚ö†Ô∏è Processus Ollama d√©tect√©s:" -ForegroundColor Yellow
    foreach ($proc in $ollamaProcesses) {
        Write-Host "  - PID: $($proc.Id) | M√©moire: $([math]::Round($proc.WorkingSet64/1MB, 2)) MB" -ForegroundColor White
    }
} else {
    Write-Host "‚úÖ Aucun processus Ollama en cours" -ForegroundColor Green
}

# 3. V√©rifier le port 11434 (Ollama API)
Write-Host "`nüîå V√©rification du port 11434 (Ollama API):" -ForegroundColor Blue
if (Test-Port -Port 11434) {
    Write-Host "‚ö†Ô∏è Port 11434 utilis√©" -ForegroundColor Yellow
} else {
    Write-Host "‚úÖ Port 11434 libre" -ForegroundColor Green
}

# 4. V√©rifier la connectivit√© Ollama
Write-Host "`nüåê Test de connectivit√© Ollama:" -ForegroundColor Blue
try {
    $response = Invoke-WebRequest -Uri "http://localhost:11434/api/tags" -Method GET -TimeoutSec 3 -ErrorAction Stop
    Write-Host "‚ö†Ô∏è API Ollama accessible et active" -ForegroundColor Yellow
} catch {
    Write-Host "‚úÖ API Ollama non accessible (service arr√™t√©)" -ForegroundColor Green
}

Write-Host "`n" -ForegroundColor White
$response = Read-Host "Voulez-vous arr√™ter tous les services ? (y/N)"

if ($response -eq "y" -or $response -eq "Y" -or $response -eq "yes" -or $response -eq "oui") {
    Write-Host "`nüõë Arr√™t des services..." -ForegroundColor Red
    
    # Arr√™ter Node.js (Bot Discord)
    Write-Host "`nü§ñ Arr√™t du Bot Discord:" -ForegroundColor Blue
    Stop-ProcessByName -ProcessName "node"
    
    # Arr√™ter Ollama
    Write-Host "`nü¶ô Arr√™t d'Ollama:" -ForegroundColor Blue
    Stop-ProcessByName -ProcessName "ollama"
    
    # V√©rification finale
    Write-Host "`n‚úÖ V√©rification finale..." -ForegroundColor Cyan
    Start-Sleep -Seconds 3
    
    $nodeStillRunning = Get-Process -Name "node" -ErrorAction SilentlyContinue
    $ollamaStillRunning = Get-Process -Name "ollama" -ErrorAction SilentlyContinue
    $portStillUsed = Test-Port -Port 11434
    
    if (-not $nodeStillRunning -and -not $ollamaStillRunning -and -not $portStillUsed) {
        Write-Host "üéâ Tous les services ont √©t√© arr√™t√©s avec succ√®s !" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è Certains services peuvent encore √™tre actifs..." -ForegroundColor Yellow
        if ($nodeStillRunning) { Write-Host "  - Node.js encore actif" -ForegroundColor Red }
        if ($ollamaStillRunning) { Write-Host "  - Ollama encore actif" -ForegroundColor Red }
        if ($portStillUsed) { Write-Host "  - Port 11434 encore utilis√©" -ForegroundColor Red }
    }
    
} else {
    Write-Host "`n‚úÖ Aucune action effectu√©e. Services laiss√©s en l'√©tat." -ForegroundColor Green
}

Write-Host "`nüìã R√©sum√© final:" -ForegroundColor Cyan
Write-Host "  - Pour d√©marrer: .\start-bot.ps1" -ForegroundColor White
Write-Host "  - Pour v√©rifier/arr√™ter: .\stop-bot.ps1" -ForegroundColor White
Write-Host "  - Pour surveiller: Get-Process node,ollama" -ForegroundColor White

Write-Host "`n‚ú® Script termin√©." -ForegroundColor Green